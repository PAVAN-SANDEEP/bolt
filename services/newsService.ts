import { Platform } from 'react-native';

const API_BASE_URL = Platform.OS === 'web' 
  ? 'http://localhost:3000/api'
  : 'http://10.0.2.2:3000/api'; // Android emulator localhost

export interface NewsItem {
  id: string;
  title: string;
  content: string;
  why: string;
  how: string;
  category: string;
  imageUrl?: string;
  actionUrl?: string;
  createdAt: string;
}

class NewsService {
  async getNews(language: string = 'en'): Promise<NewsItem[]> {
    try {
      const response = await fetch(`${API_BASE_URL}/news?language=${language}`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch news');
      }
      
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error fetching news:', error);
      // Return mock data for development if server is not available
      return this.getMockNews(language);
    }
  }

  async getNewsById(id: string, language: string = 'en'): Promise<NewsItem> {
    try {
      const response = await fetch(`${API_BASE_URL}/news/${id}?language=${language}`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch news item');
      }
      
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error fetching news item:', error);
      throw error;
    }
  }

  async getLanguages() {
    try {
      const response = await fetch(`${API_BASE_URL}/languages`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch languages');
      }
      
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error fetching languages:', error);
      return [
        { code: 'en', name: 'English', flag: 'üá∫üá∏' },
        { code: 'te', name: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å', flag: 'üáÆüá≥' },
        { code: 'hi', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
      ];
    }
  }

  private getMockNews(language: string): NewsItem[] {
    const mockData = {
      en: [
        {
          id: '1',
          title: 'ChatGPT Vision Update',
          content: 'OpenAI\'s ChatGPT can now analyze images, read documents, and understand visual content in real-time.',
          why: 'This makes AI more versatile for students and professionals who work with visual data, presentations, and documents.',
          how: 'Upload screenshots, charts, or documents to ChatGPT and ask specific questions about the content.',
          category: 'AI',
          imageUrl: 'https://images.pexels.com/photos/8386440/pexels-photo-8386440.jpeg',
          actionUrl: 'https://chat.openai.com',
          createdAt: new Date().toISOString(),
        },
        {
          id: '2',
          title: 'GitHub Copilot Workspace',
          content: 'GitHub\'s new Copilot Workspace can understand entire codebases and suggest comprehensive solutions to bugs and features.',
          why: 'This dramatically speeds up development cycles and helps developers learn best practices from AI-generated code.',
          how: 'Sign up for GitHub Copilot and integrate it with your IDE. Start with simple code completion and gradually use advanced features.',
          category: 'Development',
          imageUrl: 'https://images.pexels.com/photos/11035380/pexels-photo-11035380.jpeg',
          actionUrl: 'https://github.com/features/copilot',
          createdAt: new Date().toISOString(),
        },
      ],
      te: [
        {
          id: '1',
          title: '‡∞ö‡∞æ‡∞ü‡±ç‚Äå‡∞ú‡∞ø‡∞™‡∞ø‡∞ü‡∞ø ‡∞µ‡∞ø‡∞ú‡∞®‡±ç ‡∞Ö‡∞™‡±ç‚Äå‡∞°‡±á‡∞ü‡±ç',
          content: '‡∞ì‡∞™‡±Ü‡∞®‡±ç‡∞é‡∞ê ‡∞Ø‡±ä‡∞ï‡±ç‡∞ï ‡∞ö‡∞æ‡∞ü‡±ç‚Äå‡∞ú‡∞ø‡∞™‡∞ø‡∞ü‡∞ø ‡∞á‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡∞®‡±Å ‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞ø‡∞Ç‡∞ö‡∞ó‡∞≤‡∞¶‡±Å, ‡∞™‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡∞®‡±Å ‡∞ö‡∞¶‡∞µ‡∞ó‡∞≤‡∞¶‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞¶‡±É‡∞∂‡±ç‡∞Ø ‡∞ï‡∞Ç‡∞ü‡±Ü‡∞Ç‡∞ü‡±ç‚Äå‡∞®‡±Å ‡∞®‡∞ø‡∞ú ‡∞∏‡∞Æ‡∞Ø‡∞Ç‡∞≤‡±ã ‡∞Ö‡∞∞‡±ç‡∞•‡∞Ç ‡∞ö‡±á‡∞∏‡±Å‡∞ï‡±ã‡∞ó‡∞≤‡∞¶‡±Å.',
          why: '‡∞á‡∞¶‡∞ø ‡∞¶‡±É‡∞∂‡±ç‡∞Ø ‡∞°‡±á‡∞ü‡∞æ, ‡∞™‡±ç‡∞∞‡±Ü‡∞ú‡±Ü‡∞Ç‡∞ü‡±á‡∞∑‡∞®‡±ç‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞™‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡∞§‡±ã ‡∞™‡∞®‡∞ø ‡∞ö‡±á‡∞∏‡±á ‡∞µ‡∞ø‡∞¶‡±ç‡∞Ø‡∞æ‡∞∞‡±ç‡∞•‡±Å‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞®‡∞ø‡∞™‡±Å‡∞£‡±Å‡∞≤‡∞ï‡±Å AI‡∞®‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ç‡∞§ ‡∞¨‡∞π‡±Å‡∞Æ‡±Å‡∞ñ‡∞Ç‡∞ó‡∞æ ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.',
          how: '‡∞ö‡∞æ‡∞ü‡±ç‚Äå‡∞ú‡∞ø‡∞™‡∞ø‡∞ü‡∞ø‡∞ï‡∞ø ‡∞∏‡±ç‡∞ï‡±ç‡∞∞‡±Ä‡∞®‡±ç‚Äå‡∞∑‡∞æ‡∞ü‡±ç‚Äå‡∞≤‡±Å, ‡∞ö‡∞æ‡∞∞‡±ç‡∞ü‡±ç‚Äå‡∞≤‡±Å ‡∞≤‡±á‡∞¶‡∞æ ‡∞™‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡∞®‡±Å ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞∏‡∞ø, ‡∞ï‡∞Ç‡∞ü‡±Ü‡∞Ç‡∞ü‡±ç ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞®‡∞ø‡∞∞‡±ç‡∞¶‡∞ø‡∞∑‡±ç‡∞ü ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞≤‡±Å ‡∞Ö‡∞°‡±Å‡∞ó‡∞Ç‡∞°‡∞ø.',
          category: 'AI',
          imageUrl: 'https://images.pexels.com/photos/8386440/pexels-photo-8386440.jpeg',
          actionUrl: 'https://chat.openai.com',
          createdAt: new Date().toISOString(),
        },
      ],
      hi: [
        {
          id: '1',
          title: '‡§ö‡•à‡§ü‡§ú‡•Ä‡§™‡•Ä‡§ü‡•Ä ‡§µ‡§ø‡§ú‡§® ‡§Ö‡§™‡§°‡•á‡§ü',
          content: '‡§ì‡§™‡§®‡§è‡§Ü‡§à ‡§ï‡§æ ‡§ö‡•à‡§ü‡§ú‡•Ä‡§™‡•Ä‡§ü‡•Ä ‡§Ö‡§¨ ‡§á‡§Æ‡•á‡§ú ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à, ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§™‡§¢‡§º ‡§∏‡§ï‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§∞‡•Ä‡§Ø‡§≤-‡§ü‡§æ‡§á‡§Æ ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§ú‡•Å‡§Ö‡§≤ ‡§ï‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡•ã ‡§∏‡§Æ‡§ù ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§',
          why: '‡§Ø‡§π ‡§â‡§® ‡§õ‡§æ‡§§‡•ç‡§∞‡•ã‡§Ç ‡§î‡§∞ ‡§™‡•á‡§∂‡•á‡§µ‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§Ü‡§à ‡§ï‡•ã ‡§Ö‡§ß‡§ø‡§ï ‡§¨‡§π‡•Å‡§Æ‡•Å‡§ñ‡•Ä ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à ‡§ú‡•ã ‡§µ‡§ø‡§ú‡•Å‡§Ö‡§≤ ‡§°‡•á‡§ü‡§æ, ‡§™‡•ç‡§∞‡•á‡§ú‡•á‡§Ç‡§ü‡•á‡§∂‡§® ‡§î‡§∞ ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§',
          how: '‡§ö‡•à‡§ü‡§ú‡•Ä‡§™‡•Ä‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§®‡§∂‡•â‡§ü, ‡§ö‡§æ‡§∞‡•ç‡§ü ‡§Ø‡§æ ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ï‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§',
          category: 'AI',
          imageUrl: 'https://images.pexels.com/photos/8386440/pexels-photo-8386440.jpeg',
          actionUrl: 'https://chat.openai.com',
          createdAt: new Date().toISOString(),
        },
      ],
    };

    return mockData[language as keyof typeof mockData] || mockData.en;
  }
}

export const newsService = new NewsService();